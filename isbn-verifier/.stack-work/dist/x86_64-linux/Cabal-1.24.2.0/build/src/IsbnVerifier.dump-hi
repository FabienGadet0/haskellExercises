
==================== FINAL INTERFACE ====================
2017-11-14 17:26:22.127128 UTC

interface isbn-verifier-1.1.0.1-HLFyrrzNZ6Y1Wx6hrRAOVi:IsbnVerifier 8002
  interface hash: 9b406d1faac5876352063249e9729959
  ABI hash: 20d978d924e50cda1297873b29a44332
  export-list hash: c0f912ddf6d55c54f91e4f4a9db0e077
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  IsbnVerifier.isbn
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
89e8d9f881f4bb28e33aedffdfea6ae9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   IsbnVerifier.$trModule2
                   IsbnVerifier.$trModule1) -}
d16c0203cf397a6270ad114e09d114ce
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IsbnVerifier"#) -}
9111eeb7ca87f149c0b198d8ddb0f88a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "isbn-verifier-1.1.0.1-HLFyrrzNZ6Y1Wx6hrRAOVi"#) -}
7c46753a7331c3e02ba5c61b29755f7e
  $wgo ::
    [GHC.Types.Char]
    -> [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,U>, Inline: [0] -}
3e16b10174c9c1d1796118b198f69220
  isbn :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (str :: GHC.Base.String) ->
                 let {
                   resultCleaned :: [GHC.Types.Char]
                   = GHC.List.filter @ GHC.Types.Char IsbnVerifier.validator str
                 } in
                 case IsbnVerifier.isbn_go2
                        resultCleaned
                        (GHC.List.lastError @ GHC.Types.Char) of wild { GHC.Types.C# x ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     case GHC.List.$wlenAcc @ GHC.Types.Char resultCleaned 0# of ww2 {
                       DEFAULT -> GHC.Types.False
                       10#
                       -> case IsbnVerifier.$wgo
                                 resultCleaned
                                 IsbnVerifier.isbn1
                                 0# of ww { DEFAULT ->
                          case GHC.Classes.modInt# ww 11# of ww1 {
                            DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } }
                 } in
                 case x of wild1 {
                   DEFAULT
                   -> case (IsbnVerifier.isbn_go1 resultCleaned)
                             `cast`
                           (Data.Monoid.N:All[0]) of wild2 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> $j GHC.Prim.void# }
                   'X'#
                   -> case GHC.List.reverse1
                             @ GHC.Types.Char
                             resultCleaned
                             (GHC.Types.[] @ GHC.Types.Char) of wild2 {
                        [] -> case GHC.List.scanl2 ret_ty GHC.Types.Bool of {}
                        : ds1 xs
                        -> case (IsbnVerifier.isbn_go xs)
                                  `cast`
                                (Data.Monoid.N:All[0]) of wild3 {
                             GHC.Types.False
                             -> case (IsbnVerifier.isbn_go1 resultCleaned)
                                       `cast`
                                     (Data.Monoid.N:All[0]) of wild4 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> $j GHC.Prim.void# }
                             GHC.Types.True -> $j GHC.Prim.void# } } } }) -}
cd7fa0ed642d6f7615c0ef7e8b057c4f
  isbn1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.efdtInt 10# 9# 1#) -}
fb89f1b55d25a9a7aa7d291322ab84ea
  isbn_go :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d07f0eed6459ff37a64378ac3e4677ee
  isbn_go1 :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a30ad6a8e13e947efcec6c9655e79f64
  isbn_go2 :: [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
0f905c9815f6f8311032a47b195caf1c
  validator :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (i :: GHC.Types.Char) ->
                 case i of wild { GHC.Types.C# c# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.leWord#
                           (GHC.Prim.int2Word# (GHC.Prim.-# (GHC.Prim.ord# c#) 48#))
                           9##) of wild1 {
                   GHC.Types.False
                   -> case c# of wild2 {
                        DEFAULT -> GHC.Types.False 'X'# -> GHC.Types.True }
                   GHC.Types.True -> GHC.Types.True } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

