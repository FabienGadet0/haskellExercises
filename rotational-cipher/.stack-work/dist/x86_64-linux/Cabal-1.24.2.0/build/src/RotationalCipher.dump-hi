
==================== FINAL INTERFACE ====================
2017-11-17 08:03:34.089535 UTC

interface rotational-cipher-1.1.0.1-9go241enq9zGHpA7gJ72tT:RotationalCipher 8002
  interface hash: a3521b4f9e66742a9273ab17482bf73d
  ABI hash: 7707ee82f3c34fb488936c87707f6ea9
  export-list hash: 589a0ffd423f6ff241847ed78586e68b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  RotationalCipher.rotate
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Char 9d27e5fcb214fa9fb17cf295b3795fce
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
071197e701a1bb481c53099101aa0c2f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   RotationalCipher.$trModule2
                   RotationalCipher.$trModule1) -}
bc26f4e2273e0ec5bbf859a83143f9ee
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "RotationalCipher"#) -}
4d4eef834bbc09f4faaf530ff6935b20
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "rotational-cipher-1.1.0.1-9go241enq9zGHpA7gJ72tT"#) -}
5be25a7e600875de67130b042ac439c5
  rotate :: GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(U)><S,1*U>,
     Unfolding: (\ (i :: GHC.Types.Int) (eta :: [GHC.Types.Char]) ->
                 GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   (\ (letter :: GHC.Types.Char) ->
                    case i of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 0#) of wild1 {
                      GHC.Types.False
                      -> case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# x 26#) of wild2 {
                           GHC.Types.False
                           -> case letter of wild3 { GHC.Types.C# c# ->
                              case {__pkg_ccall base-4.9.1.0 u_iswalpha GHC.Prim.Int#
                                                                        -> GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                        -> (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              GHC.Prim.Int# #)}
                                     (GHC.Prim.ord# c#)
                                     GHC.Prim.realWorld# of wild4 { (#,#) ds ds1 ->
                              case ds1 of wild5 {
                                DEFAULT
                                -> case {__pkg_ccall base-4.9.1.0 u_iswupper GHC.Prim.Int#
                                                                             -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   GHC.Prim.Int# #)}
                                          (GHC.Prim.ord# c#)
                                          GHC.Prim.realWorld# of wild6 { (#,#) ds2 ds3 ->
                                   let {
                                     $w$j :: GHC.Prim.Int# -> GHC.Prim.Char#
                                       {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                     = \ (w :: GHC.Prim.Int#)[OneShot] ->
                                       let {
                                         x1 :: GHC.Prim.Int# = GHC.Prim.+# (GHC.Prim.ord# c#) x
                                       } in
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.># x1 (GHC.Prim.-# 122# w)) of wild7 {
                                         GHC.Types.False
                                         -> case GHC.Prim.tagToEnum#
                                                   @ GHC.Types.Bool
                                                   (GHC.Prim.leWord#
                                                      (GHC.Prim.int2Word# x1)
                                                      1114111##) of wild8 {
                                              GHC.Types.False
                                              -> case GHC.Char.chr2 x1 ret_ty GHC.Prim.Char# of {}
                                              GHC.Types.True -> GHC.Prim.chr# x1 }
                                         GHC.Types.True
                                         -> let {
                                              $w$j1 :: GHC.Prim.Int# -> GHC.Prim.Char#
                                                {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                                              = \ (w1 :: GHC.Prim.Int#)[OneShot] ->
                                                case ds3 of wild8 {
                                                  DEFAULT
                                                  -> let {
                                                       i# :: GHC.Prim.Int#
                                                       = GHC.Prim.+#
                                                           (GHC.Prim.-# 97# w1)
                                                           (GHC.Prim.-# x1 91#)
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.leWord#
                                                               (GHC.Prim.int2Word# i#)
                                                               1114111##) of wild9 {
                                                       GHC.Types.False
                                                       -> case GHC.Char.chr2 i#
                                                          ret_ty GHC.Prim.Char#
                                                          of {}
                                                       GHC.Types.True -> GHC.Prim.chr# i# }
                                                  0#
                                                  -> let {
                                                       i# :: GHC.Prim.Int#
                                                       = GHC.Prim.+#
                                                           (GHC.Prim.-# 97# w1)
                                                           (GHC.Prim.-# x1 123#)
                                                     } in
                                                     case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.leWord#
                                                               (GHC.Prim.int2Word# i#)
                                                               1114111##) of wild9 {
                                                       GHC.Types.False
                                                       -> case GHC.Char.chr2 i#
                                                          ret_ty GHC.Prim.Char#
                                                          of {}
                                                       GHC.Types.True -> GHC.Prim.chr# i# } }
                                            } in
                                            case ds3 of wild8 {
                                              DEFAULT -> $w$j1 32# 0# -> $w$j1 0# } }
                                   } in
                                   case ds3 of wild7 {
                                     DEFAULT -> case $w$j 32# of ww { DEFAULT -> GHC.Types.C# ww }
                                     0# -> case $w$j 0# of ww { DEFAULT -> GHC.Types.C# ww } } }
                                0# -> wild3 } } }
                           GHC.Types.True -> letter }
                      GHC.Types.True -> letter } })
                   eta) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

