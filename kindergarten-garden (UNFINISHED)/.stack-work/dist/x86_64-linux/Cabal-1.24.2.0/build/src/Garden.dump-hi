
==================== FINAL INTERFACE ====================
2017-11-20 05:07:25.833728 UTC

interface kindergarten-garden-1.0.0.3-65dfosa10uZ4DVhcuLg2Gl:Garden 8002
  interface hash: b80c9f7ee3f40dc63858c9a7c53d596a
  ABI hash: 50240c9391f74dc4aba8b6c3c8018a8e
  export-list hash: f6f13a306380a661e6fec54640526a07
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Garden.defaultGarden
  Garden.garden
  Garden.lookupPlants
  Garden.Plant{Garden.Clover Garden.Grass Garden.Radishes Garden.Violets}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
a2499374d79ea16ade8cb1db08e9562c
  $fEqPlant :: GHC.Classes.Eq Garden.Plant
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Garden.Plant Garden.$fEqPlant_$c== Garden.$fEqPlant_$c/= -}
a2499374d79ea16ade8cb1db08e9562c
  $fEqPlant_$c/= :: Garden.Plant -> Garden.Plant -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Garden.Plant) (b :: Garden.Plant) ->
                 case a of wild {
                   Garden.Clover
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Garden.Clover -> GHC.Types.False }
                   Garden.Grass
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Garden.Grass -> GHC.Types.False }
                   Garden.Radishes
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Garden.Radishes -> GHC.Types.False }
                   Garden.Violets
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Garden.Violets -> GHC.Types.False } }) -}
a2499374d79ea16ade8cb1db08e9562c
  $fEqPlant_$c== :: Garden.Plant -> Garden.Plant -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Garden.Plant) (ds1 :: Garden.Plant) ->
                 case ds of wild {
                   Garden.Clover
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Garden.Clover -> GHC.Types.True }
                   Garden.Grass
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Garden.Grass -> GHC.Types.True }
                   Garden.Radishes
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Garden.Radishes -> GHC.Types.True }
                   Garden.Violets
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Garden.Violets -> GHC.Types.True } }) -}
a2499374d79ea16ade8cb1db08e9562c
  $fShowPlant :: GHC.Show.Show Garden.Plant
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Garden.Plant
                  Garden.$fShowPlant_$cshowsPrec
                  Garden.$fShowPlant_$cshow
                  Garden.$fShowPlant_$cshowList -}
38b90d7febca8164209f8e7a0472fd70
  $fShowPlant1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Violets"#) -}
fa4d8fa682382d0d04a6f939f596496f
  $fShowPlant2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Radishes"#) -}
b98a9cacb66db7abe98f40fea0952d5e
  $fShowPlant3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Grass"#) -}
8c349c1e99c6d5b76343b613c87ed423
  $fShowPlant4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Clover"#) -}
a2499374d79ea16ade8cb1db08e9562c
  $fShowPlant_$cshow :: Garden.Plant -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Garden.Plant) ->
                 Garden.$fShowPlant_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a2499374d79ea16ade8cb1db08e9562c
  $fShowPlant_$cshowList :: [Garden.Plant] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Garden.Plant
                   Garden.$w$cshowsPrec) -}
a2499374d79ea16ade8cb1db08e9562c
  $fShowPlant_$cshowsPrec ::
    GHC.Types.Int -> Garden.Plant -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Garden.Plant)
                   (w2 :: GHC.Base.String) ->
                 Garden.$w$cshowsPrec w1 w2) -}
f5cba759815052107962d72f409b1856
  $tc'Clover :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10001657171897738422##
                   11280416502192350322##
                   Garden.$trModule
                   Garden.$tc'Clover1) -}
3d9c2961840313768bd1f6b7070041a7
  $tc'Clover1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Clover"#) -}
3f7c33830fd5d7b6a033f4caf321d5cc
  $tc'Grass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9247299745333421522##
                   10909515549688989261##
                   Garden.$trModule
                   Garden.$tc'Grass1) -}
dbaa76fde197259df76a378b9d24839f
  $tc'Grass1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Grass"#) -}
d192f3c2dcc883ee3976762352c79ec7
  $tc'Radishes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10632706456414562880##
                   5608906077627987315##
                   Garden.$trModule
                   Garden.$tc'Radishes1) -}
7b4489f1eb2d6258ad2fddf8865b4e9e
  $tc'Radishes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Radishes"#) -}
1d1bed44fbafe63384843546ca486b96
  $tc'Violets :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11428930494787367452##
                   10074070259974977393##
                   Garden.$trModule
                   Garden.$tc'Violets1) -}
2016036ad4f593a6366302affb6ce9a5
  $tc'Violets1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Violets"#) -}
e172ba7e08f0281e1968fc93feeb754b
  $tcPlant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4214405229308934660##
                   11408533728242067636##
                   Garden.$trModule
                   Garden.$tcPlant1) -}
6f24b34672d5d8e8ad9e598dd641e194
  $tcPlant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Plant"#) -}
fd05e64640781203dd17674a8f8b8d24
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Garden.$trModule2
                   Garden.$trModule1) -}
c58e1027f230a251257efbc1191b095e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Garden"#) -}
9502965993c3bf5cf6e1bd66efb07d55
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "kindergarten-garden-1.0.0.3-65dfosa10uZ4DVhcuLg2Gl"#) -}
a2499374d79ea16ade8cb1db08e9562c
  $w$cshowsPrec :: Garden.Plant -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Garden.Plant) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Garden.Clover
                   -> GHC.Base.++ @ GHC.Types.Char Garden.$fShowPlant4 w1
                   Garden.Grass -> GHC.Base.++ @ GHC.Types.Char Garden.$fShowPlant3 w1
                   Garden.Radishes
                   -> GHC.Base.++ @ GHC.Types.Char Garden.$fShowPlant2 w1
                   Garden.Violets
                   -> GHC.Base.++ @ GHC.Types.Char Garden.$fShowPlant1 w1 }) -}
a2499374d79ea16ade8cb1db08e9562c
  data Plant = Clover | Grass | Radishes | Violets
4dfc3bff81b9420220a25c2567e5026a
  defaultGarden ::
    GHC.Base.String -> Data.Map.Base.Map GHC.Base.String [Garden.Plant]
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ (plants :: GHC.Base.String) -> Garden.defaultGarden1) -}
f2076e0b8c256ededb3054a9fb79e42e
  defaultGarden1 :: Data.Map.Base.Map GHC.Base.String [Garden.Plant]
  {- Strictness: x -}
a5e6d33666f84b9e0e07e88f047e147c
  garden ::
    [GHC.Base.String]
    -> GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String [Garden.Plant]
  {- Arity: 2, Strictness: <B,A><B,A>x,
     Unfolding: InlineRule (2, True, True)
                (\ (students :: [GHC.Base.String]) (plants :: GHC.Base.String) ->
                 Garden.garden1) -}
a5cff524802cfcae4c66ecbfa98c611d
  garden1 :: Data.Map.Base.Map GHC.Base.String [Garden.Plant]
  {- Strictness: x -}
87d655ab81b644aaa453313492aa2042
  lookupPlants ::
    GHC.Classes.Ord k => k -> Data.Map.Base.Map k a -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ k
                   ($dOrd :: GHC.Classes.Ord k)
                   (student :: k)
                   (garden2 :: Data.Map.Base.Map k a) ->
                 Data.Map.Base.lookup @ k @ a $dOrd student garden2) -}
instance [safe] GHC.Classes.Eq [Garden.Plant] = Garden.$fEqPlant
instance [safe] GHC.Show.Show [Garden.Plant] = Garden.$fShowPlant
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

