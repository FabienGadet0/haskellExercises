
==================== FINAL INTERFACE ====================
2017-11-21 05:50:19.37697 UTC

interface secret-handshake-1.1.0.4-H1nAaqv1APe7my7w5If9CU:SecretHandshake 8002
  interface hash: 966c68a7ffb2b8e033d9d69a3bab7643
  ABI hash: ea500255ca77b8ee705566dbd7078bea
  export-list hash: 583e9919e2057b6bb30adb7b5614ddc8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  SecretHandshake.handshake
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
c8cd59d5332522965a52d41e5f9f4c93
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SecretHandshake.$trModule2
                   SecretHandshake.$trModule1) -}
425b874e160b4c004d69dea0af71a9ad
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SecretHandshake"#) -}
49630c0855ef35bf12318e249354d185
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "secret-handshake-1.1.0.4-H1nAaqv1APe7my7w5If9CU"#) -}
8a5336fc3c34280b6c4bed5ef1af12c0
  $wlvl :: GHC.Prim.Int# -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case ww of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Base.String
                   1# -> GHC.Base.Just @ [GHC.Types.Char] SecretHandshake.handshake5
                   2# -> GHC.Base.Just @ [GHC.Types.Char] SecretHandshake.handshake4
                   3# -> GHC.Base.Just @ [GHC.Types.Char] SecretHandshake.handshake3
                   4#
                   -> GHC.Base.Just
                        @ [GHC.Types.Char]
                        SecretHandshake.handshake2 }) -}
2c90ae162576b0300c0bbeeefa1ab721
  $wtoBin :: GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
82527d93b83fa0d5f3f5a16aad5a09a5
  handshake :: GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 1, Strictness: <L,1*U(1*U)>,
     Unfolding: (\ (str :: GHC.Types.Int) ->
                 let {
                   r :: [GHC.Types.Int]
                   = case str of ww { GHC.Types.I# ww1 ->
                     SecretHandshake.$wtoBin ww1 }
                 } in
                 letrec {
                   go :: [GHC.Types.Int] -> [GHC.Types.Int] -> [GHC.Types.Int]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [GHC.Types.Int]) (_ys :: [GHC.Types.Int]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Int
                       : ipv ipv1
                       -> case _ys of wild1 {
                            [] -> GHC.Types.[] @ GHC.Types.Int
                            : ipv2 ipv3
                            -> case ipv2 of wild2 { GHC.Types.I# x ->
                               case x of wild3 {
                                 DEFAULT -> go ipv1 ipv3
                                 1#
                                 -> GHC.Types.:
                                      @ GHC.Types.Int
                                      (case GHC.List.$wlenAcc
                                              @ GHC.Types.Int
                                              r
                                              0# of ww2 { DEFAULT ->
                                       case ipv of wild4 { GHC.Types.I# y ->
                                       GHC.Types.I# (GHC.Prim.-# ww2 y) } })
                                      (go ipv1 ipv3) } } } }
                 } in
                 let {
                   sizeOfIndexes :: [GHC.Types.Int] = go SecretHandshake.handshake6 r
                 } in
                 case (SecretHandshake.handshake_go sizeOfIndexes)
                        `cast`
                      (Data.Monoid.N:Any[0]) of wild {
                   GHC.Types.False
                   -> GHC.List.reverse1
                        @ GHC.Base.String
                        (Data.Maybe.catMaybes1
                           @ GHC.Base.String
                           (GHC.Base.map
                              @ GHC.Types.Int
                              @ (GHC.Base.Maybe GHC.Base.String)
                              SecretHandshake.handshake1
                              sizeOfIndexes))
                        (GHC.Types.[] @ GHC.Base.String)
                   GHC.Types.True
                   -> Data.Maybe.catMaybes1
                        @ GHC.Base.String
                        (GHC.Base.map
                           @ GHC.Types.Int
                           @ (GHC.Base.Maybe GHC.Base.String)
                           SecretHandshake.handshake1
                           sizeOfIndexes) }) -}
a747164e51b03a4f93eb5eba26bc001f
  handshake1 :: GHC.Types.Int -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> SecretHandshake.$wlvl ww1 }) -}
e2dda7fbffe268b27d070265d8655bc0
  handshake2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "jump"#) -}
67e8de165196af4c2bc00931b058d7bb
  handshake3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "close your eyes"#) -}
7361afac610a9ba90d3990ef7c5bd018
  handshake4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "double blink"#) -}
4e3d9de643e69e7ce0a8cf13c0c62c47
  handshake5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "wink"#) -}
da898fa8d82b01bf3998ba3c7c2d6abe
  handshake6 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
6748bced22357dfb168270c24b0299f1
  handshake_go :: [GHC.Types.Int] -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

