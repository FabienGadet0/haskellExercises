
==================== FINAL INTERFACE ====================
2017-11-18 15:30:30.035029 UTC

interface nucleotide-count-1.2.0.4-SLrRg0CK4gKN03Rx7ZIdN:DNA 8002
  interface hash: 95de929c479eff01111fc5d0bcec4323
  ABI hash: a49d988907ac54e76530eb25638cd708
  export-list hash: 3a6ce0b8bbd3fd3763ad351077ae56af
  orphan hash: 151f4e31c7250b37c640e1f07d08cd5f
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  DNA.nucleotideCounts
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
a54f7773e16091909571fb50042965f4
  $sfromList ::
    [(GHC.Types.Char, a)] -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds1 :: [(GHC.Types.Char, a)]) ->
                 case ds1 of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Char @ a
                   : ds2 ds3
                   -> case ds2 of wild1 { (,) kx x ->
                      case ds3 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.C# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Char
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds4 ->
                           case kx of wild4 { GHC.Types.C# c1 ->
                           case ky of wild5 { GHC.Types.C# c2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.geChar# c1 c2) of wild6 {
                             GHC.Types.False
                             -> DNA.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2
                             GHC.Types.True
                             -> DNA.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2 } } } } } } }) -}
09ce3f20a21740793d9e606cce3b1346
  $sfromList1 ::
    Data.Map.Base.Map GHC.Types.Char a1
    -> [(GHC.Types.Char, a1)] -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
3caffda59ffb4a0e951641ab5c9b5c14
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module DNA.$trModule2 DNA.$trModule1) -}
2e6b5dd5ad64a276d4a9c2c59369a042
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DNA"#) -}
e08c094c4cabad6824c33ac4e3d3ac7e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "nucleotide-count-1.2.0.4-SLrRg0CK4gKN03Rx7ZIdN"#) -}
87acf9857f53fedede6644eef01073af
  $w$sgo10 ::
    GHC.Prim.Char#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
2f80bb5cc65901816e3d84f5de380349
  $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
9c2be064c93885038533b3283bc7b092
  $wgo1 :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
6443e7286a142812a84e717d341f6faa
  $wgo2 :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
a7622f97dd8ca6ed1325b894adcf93e5
  $wgo3 :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
99f06d8b5b7cad857333ec4069072201
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Char a
    -> [(GHC.Types.Char, a)]
    -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
915631fd698b866ca3323fad542a8809
  nucleotideCounts ::
    GHC.Base.String
    -> Data.Either.Either
         GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 let {
                   r :: Data.Map.Base.Map GHC.Types.Char GHC.Types.Int
                   = DNA.$sfromList
                       @ GHC.Types.Int
                       (GHC.Types.:
                          @ (GHC.Types.Char, GHC.Types.Int)
                          (DNA.nucleotideCounts4,
                           case DNA.$wgo3 xs 0# of ww { DEFAULT -> GHC.Types.I# ww })
                          (GHC.Types.:
                             @ (GHC.Types.Char, GHC.Types.Int)
                             (DNA.nucleotideCounts3,
                              case DNA.$wgo2 xs 0# of ww { DEFAULT -> GHC.Types.I# ww })
                             (GHC.Types.:
                                @ (GHC.Types.Char, GHC.Types.Int)
                                (DNA.nucleotideCounts2,
                                 case DNA.$wgo1 xs 0# of ww { DEFAULT -> GHC.Types.I# ww })
                                (GHC.Types.:
                                   @ (GHC.Types.Char, GHC.Types.Int)
                                   (DNA.nucleotideCounts1,
                                    case DNA.$wgo xs 0# of ww { DEFAULT -> GHC.Types.I# ww })
                                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))))))
                 } in
                 case (DNA.nucleotideCounts_go xs)
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                        (Data.Map.Base.$fShowMap_$cshow
                           @ GHC.Types.Char
                           @ GHC.Types.Int
                           GHC.Show.$fShowChar
                           GHC.Show.$fShowInt
                           r)
                   GHC.Types.True
                   -> Data.Either.Right
                        @ GHC.Base.String
                        @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                        r }) -}
01123146c431d2bf8506f4cf6d3e27ae
  nucleotideCounts1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'T'#) -}
cda99b48f6d845133f41cae8a772db5d
  nucleotideCounts2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'G'#) -}
6da58e6259210aa32ef49d1df4853876
  nucleotideCounts3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'C'#) -}
ed269c62a345d4bd3b1e22d76eaa830a
  nucleotideCounts4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'A'#) -}
095144c5eb05b31cac7273bfd3853cc6
  nucleotideCounts_go :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, Strictness: <S,1*U> -}
"SPEC/DNA fromList @ Char _" [ALWAYS] forall @ a
                                             ($dOrd :: GHC.Classes.Ord GHC.Types.Char)
  Data.Map.Base.fromList @ GHC.Types.Char @ a $dOrd
  = DNA.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

